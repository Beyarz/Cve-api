# typed: true
# frozen_string_literal: true

require 'net/https'
require_relative 'general.rb'
require 'sorbet-runtime'
extend T::Sig

begin
  require 'nokogiri'
rescue LoadError
  import_failure
end

sig {params(keyword: String).returns(NilClass)}
def args_filter(keyword)
  return if keyword.empty? do
    puts 'Missing target parameter.'
    puts 'Target parameter required!'
    leave(:usage_error)
  end
end

sig {params(formatted_link: T.any(URI::Generic, String)).returns(String)}
def http_get(formatted_link)
  # Merge argument with link as param
  link = URI(formatted_link)
  resp = ''

  # Start ssl session with host
  Net::HTTP.start(link.host, 443, use_ssl: true) do |https|
    request = Net::HTTP::Get.new(link)
    response = https.request(request)
    response.message == 'OK' ? resp += response.body : false
  end

  return resp
end

sig {params(keyword: String).returns(String)}
def retrieve_cve(keyword)
  resp = http_get('https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=' + keyword)

  # Parse the html
  raw = Nokogiri::HTML(resp)
  return raw.css('#TableWithRules td')
end

sig {params(year_arg: T::Array[String], cve: T::Array[String], year: T::Array[Integer], desc: T::Array[String]).returns(T::Hash[String, Integer])}
def generate_structure(year_arg, cve, year, desc)
  # Display the available CVEs
  structure = {}

  if year_arg.to_s.empty?
    (cve.count(cve) - 1).times do |x|
      structure[x] = { 'cve': cve[x], 'year': year[x], 'desc': desc[x] }
    end
  else
    (cve.count(cve) - 1).times do |x|
      structure[x] = { 'cve': cve[x], 'year': year[x], 'desc': desc[x] } if year_arg.to_s == year[x]
    end
  end

  return structure
end

def get_cve(*args)
  # Display guide if no keyword or if too many provided
  args_filter(keyword) if args.length > 2 || args.length.zero?

  keyword = args[0]
  year_arg = args[1]
  year_arg = Time.now.year if args[1] == 'latest'

  parsed = retrieve_cve(keyword)

  cve = T::Array[String]
  year = T::Array[Integer]
  desc = T::Array[String]

  (0..parsed.count - 1).each do |index|
    if index.even?
      cve << parsed[index].text
      year << parsed[index].text.split('-')[1]
    else
      desc << parsed[index].text.strip
    end
  end

  structure = generate_structure(year_arg, cve, year, desc)
  return structure
end
